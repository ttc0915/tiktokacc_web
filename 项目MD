### 原始需求（摘要）
- 识别目录：`F:\vsc工作区域\可视化tiktok账号地球数据\粉丝分类`
- 生成一个“地球可视化数据网站”：3D 地球/地图 + 侧边国家排名
- 排名依据：按国家/地区聚合（并可按粉丝区间筛选）

### 可复制提示词（交给任意 AI/开发者即可执行）
你是一名资深全栈与数据可视化工程师。请基于本地目录数据，构建一个“TikTok 账号分布地球可视化 + 侧边榜单”的静态网站，并产出数据解析脚本与前端页面。严格按下述规范与验收标准实现。

#### 一、输入数据与目录结构
- 数据根路径（Windows）：`F:\vsc工作区域\可视化tiktok账号地球数据\粉丝分类`
- 层级约定：`{region}/{countryCode}/{followerBracket}.txt`
  - 例如：`EU/DE/0-500.txt`、`EU/FR/500-1000.txt`、`EU/RO/10000+.txt`
- 文件内容约定：
  - 如果每行是一条账号标识（如用户名/链接），则“该文件的行数 = 落在该粉丝区间的账号数量”。
  - 如果每行含“账号,数值”形式，则优先以“行数”计数账号数量，不叠加数值（除非有更明确规则）。
  - 若存在空行/注释行（以 `#` 开头），需忽略。
  - 如未能读取到内容，也要把该区间计为 0。
- 特殊目录：`unknown/` 代表国家未知；显示为“未知地区”。
- 区间命名集合（用于前端筛选与展示，若不存在对应文件则视为 0）：
  `0-500, 500-1000, 1000-2000, 2000-3000, 3000-4000, 4000-5000, 5000-6000, 6000-7000, 7000-8000, 8000-9000, 10000+`

#### 二、数据解析与汇总（后端脚本）
- 编写一个 Node.js 脚本（建议 TypeScript）扫描上述目录，按国家聚合：
  - 产出 `public/data/aggregated.json`
  - 聚合口径：
    - `countries[].byBracket[bracket] = 文件行数`
    - `countries[].totals.accounts = 所有区间行数之和`
    - `totals.accounts = 全部国家账号总数`
  - 国家名与经纬度：
    - 使用 ISO 3166-1 alpha-2（如 `DE`, `FR`）。
    - 提供中文名 `nameZh`（建议用 `i18n-iso-countries` + 自定义映射补齐）。
    - 计算或查表国家质心坐标 `centroid: [lon, lat]`（可用 `world-atlas`/内置质心表）。
  - 地域 `region` 来源于顶层目录名（如 `EU`）。无顶层目录则置空。
- 参考输出示例：
```json
{
  "generatedAt": "2025-01-01T00:00:00.000Z",
  "brackets": [
    "0-500","500-1000","1000-2000","2000-3000","3000-4000",
    "4000-5000","5000-6000","6000-7000","7000-8000","8000-9000","10000+"
  ],
  "totals": { "accounts": 8888 },
  "countries": [
    {
      "code": "DE",
      "nameZh": "德国",
      "region": "EU",
      "centroid": [10.4515, 51.1657],
      "byBracket": {
        "0-500": 1000,
        "500-1000": 200,
        "1000-2000": 34,
        "10000+": 0
      },
      "totals": { "accounts": 1234 }
    }
  ]
}
```

#### 三、前端可视化与交互
- 技术栈建议：`Vite + React + TypeScript`，可视化优先 `globe.gl`（Three.js 封装）；备选 `ECharts GL`。
- 地球展示：
  - 按国家质心绘制气泡或柱状标记，大小映射 `totals.accounts`（建议开方或对数缩放）。
  - 颜色映射可按 `totals.accounts` 分段或连续色带。
  - 支持拖拽旋转、缩放、惯性；悬停 tooltip；点击国家高亮与自动居中。
- 侧边榜单：
  - 展示 Top N 国家（默认 Top 20），按当前筛选口径排序（降序）。
  - 每行显示：国家中文名、国旗（可选）、总账号数、各区间占比条（可选）。
- 筛选器：
  - 按粉丝区间多选（默认全选）。
  - 按地域（如 `EU`）多选或单选。
  - 搜索国家（支持代码/中文名）。
- 本地化：UI 至少支持中文；如可行，增加英文切换。

#### 四、性能与工程要求
- 解析脚本在构建时运行，页面仅请求 `aggregated.json`（静态托管）。
- 数据预聚合，前端只做轻量过滤与排序。
- 大数据量下采用虚拟列表渲染榜单；地球点数 > 200 时使用合适的粒子/实例化方式。
- 代码需 TypeScript 严格类型，模块命名清晰，函数与变量语义化。

#### 五、项目结构建议
```
可视化tiktok账号地球数据/
  ├─ scripts/
  │   └─ build-data.ts        # 扫描目录并生成 aggregated.json
  ├─ public/
  │   └─ data/
  │       └─ aggregated.json
  ├─ src/
  │   ├─ data/types.ts        # 类型定义
  │   ├─ data/constants.ts    # 区间常量、颜色映射
  │   ├─ components/Globe.tsx # 地球组件
  │   ├─ components/Sidebar.tsx
  │   ├─ components/Filters.tsx
  │   └─ main.tsx
  ├─ index.html
  ├─ package.json
  └─ vite.config.ts
```

#### 六、验收标准（必须全部满足）
1) 本地运行后，默认展示 3D 地球，点位/柱状按国家数量可见；
2) 侧边榜单与地球数据一致，切换粉丝区间/地域筛选时，地球与榜单同步更新；
3) 悬停显示国家名与数量，点击高亮并居中；
4) `public/data/aggregated.json` 结构与示例一致（字段齐全，空值用 0），并含 `generatedAt`；
5) 代码可一键构建为静态站点（`dist/`），可部署到任意静态托管；
6) 未知国家（`unknown/`）单独汇总并可在榜单/地球中显示与过滤。

#### 七、边界与容错
- 若某国家缺少部分区间文件，未出现的区间计 0。
- 若出现无法识别的国家代码，放入 `unknown` 并在控制台给出告警列表。
- 若顶层无地域目录，`region` 为空字符串。

#### 八、交付物
- 可运行的数据解析脚本（含 README 使用说明）；
- `aggregated.json` 示例与生成命令；
- 前端源码与构建产物；
- 一张截图或 GIF 展示交互效果。

请严格按以上内容实现，必要时可对缺失规则做最小假设并在 README 中明示。